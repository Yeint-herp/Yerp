#ifndef STRING_VIEW_KTL
#define STRING_VIEW_KTL

namespace ktl {

class string_view {
public:
    using value_type             = char;
    using pointer                = const value_type*;
    using const_pointer          = const value_type*;
    using reference              = value_type&;
    using const_reference        = const value_type&;
    using size_type              = usize;

    using const_iterator         = const_pointer;
    using iterator               = const_iterator;

    constexpr string_view() noexcept
        : m_data(nullptr), m_size(0)
    {}

    constexpr string_view(const_pointer s, size_type count) noexcept
        : m_data(s), m_size(count)
    {}

    constexpr string_view(const_pointer s) noexcept
        : m_data(s), m_size(compute_length(s))
    {}

    template <size_type N>
    constexpr string_view(const value_type (&s)[N]) noexcept
        : m_data(s), m_size(N - 1)
    {}

    constexpr const_pointer data()   const noexcept { return m_data; }
    constexpr size_type    size()     const noexcept { return m_size; }
    constexpr size_type    length()   const noexcept { return m_size; }
    constexpr bool         empty()    const noexcept { return m_size == 0; }

    constexpr const_reference operator[](size_type pos) const noexcept {
        return m_data[pos];
    }

    constexpr iterator       begin()   const noexcept { return m_data; }
    constexpr iterator       end()     const noexcept { return m_data + m_size; }
    constexpr const_iterator cbegin()  const noexcept { return begin(); }
    constexpr const_iterator cend()    const noexcept { return end(); }

    constexpr void remove_prefix(size_type n) noexcept {
        m_data += n;
        m_size -= n;
    }

    constexpr void remove_suffix(size_type n) noexcept {
        m_size -= n;
    }

    constexpr string_view
    substr(size_type pos, size_type count = size_type(-1)) const noexcept {
        if (pos > m_size) pos = m_size;
        size_type rcount = (count < m_size - pos ? count : m_size - pos);
        return string_view(m_data + pos, rcount);
    }

    constexpr int compare(string_view other) const noexcept {
        size_type n = m_size < other.m_size ? m_size : other.m_size;
        for (size_type i = 0; i < n; ++i) {
            if (m_data[i] < other.m_data[i]) return -1;
            if (m_data[i] > other.m_data[i]) return  1;
        }
        if (m_size < other.m_size) return -1;
        if (m_size > other.m_size) return  1;
        return 0;
    }

private:
    const_pointer m_data;
    size_type     m_size;

    static constexpr size_type compute_length(const_pointer s) noexcept {
        size_type len = 0;
        while (s[len] != '\0') {
            ++len;
        }
        return len;
    }
};

constexpr bool operator==(string_view a, string_view b) noexcept { return a.compare(b) == 0; }
constexpr bool operator!=(string_view a, string_view b) noexcept { return a.compare(b) != 0; }
constexpr bool operator< (string_view a, string_view b) noexcept { return a.compare(b) <  0; }
constexpr bool operator<=(string_view a, string_view b) noexcept { return a.compare(b) <= 0; }
constexpr bool operator> (string_view a, string_view b) noexcept { return a.compare(b) >  0; }
constexpr bool operator>=(string_view a, string_view b) noexcept { return a.compare(b) >= 0; }

} // namespace ktl

#endif //STRING_VIEW_KTL

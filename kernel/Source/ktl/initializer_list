#ifndef INITIALIZER_LIST_KTL
#define INITIALIZER_LIST_KTL

#include <ktl/type_traits>

namespace ktl {

template<class E>
class initializer_list {
public:
    using value_type        = E;
    using reference         = const E&;
    using const_reference   = const E&;
    using size_type         = usize;
    using iterator          = const E*;
    using const_iterator    = const E*;

    constexpr initializer_list() noexcept
      : data_(nullptr), size_(0) {}

    constexpr size_type      size()  const noexcept { return size_; }
    constexpr const_iterator begin() const noexcept { return data_; }
    constexpr const_iterator end()   const noexcept { return data_ + size_; }

private:
    constexpr initializer_list(const E* data, size_type sz) noexcept
      : data_(data), size_(sz) {}

    const E*  data_;
    size_type size_;

    template<class U>
    friend constexpr initializer_list<U>
    make_initializer_list(const U*, typename initializer_list<U>::size_type) noexcept;
};

template<class E>
constexpr initializer_list<E>
make_initializer_list(const E* data,
						typename initializer_list<E>::size_type sz) noexcept
{
    return initializer_list<E>(data, sz);
}

} // namespace ktl

#endif //INITIALIZER_LIST_KTL
